apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

ext {
    bintrayRepo = 'movietestlibrary'
    bintrayName = 'com.madfooatcom.movietestlibrary'

    publishedGroupId = 'com.madfooatcom.movietestlibrary'
    libraryName = 'movietestlibrary'
    artifact = 'movietestlibrary'

    libraryDescription = 'Example library for loading Movies Test Library'

    siteUrl = 'https://github.com/jehadmashhour/MoviesTestLibrary'
    gitUrl = 'https://github.com/jehadmashhour/MoviesTestLibrary.git'

    libraryVersion = '9.0.0'

    developerId = 'farawla'
    developerName = 'Jehad Abdalqader'
    developerEmail = 'jehadmashhour@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}



android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    signingConfigs {
        config {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 2
        versionName "9.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            signingConfig signingConfigs.config
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }
    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

repositories {
    mavenCentral()
}

dependencies {

    api 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.72'
    api 'androidx.appcompat:appcompat:1.1.0'
    api 'androidx.constraintlayout:constraintlayout:1.1.3'

    //noinspection GradleDependency
    api 'androidx.lifecycle:lifecycle-extensions:2.1.0-alpha04'
    api 'com.google.android.material:material:1.1.0'
    api 'androidx.legacy:legacy-support-v4:1.0.0'

    api 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    api 'androidx.recyclerview:recyclerview:1.1.0'
    api 'androidx.cardview:cardview:1.0.0'
    androidTestApi 'androidx.test:runner:1.2.0'
    androidTestApi('androidx.test.espresso:espresso-contrib:3.2.0') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestApi 'androidx.test:rules:1.2.0'

    api 'com.github.florent37:shapeofview:1.4.7'
    // Required -- JUnit 4 framework
    testApi 'junit:junit:4.13'
    // Optional -- Robolectric environment
    testApi 'androidx.test:core:1.2.0'

    api 'com.squareup.retrofit2:converter-gson:2.9.0'

    api "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    api "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"

    api "org.koin:koin-androidx-scope:2.1.3"
// Koin AndroidX ViewModel features
    api "org.koin:koin-androidx-viewmodel:2.1.3"
// Koin AndroidX Fragment features
    api "org.koin:koin-androidx-fragment:2.1.3"
// Koin AndroidX Experimental features
    api "org.koin:koin-androidx-ext:2.1.3"
    api "com.squareup.retrofit2:retrofit:2.9.0"
    api "com.squareup.retrofit2:converter-gson:2.9.0"
    api "com.squareup.retrofit2:adapter-rxjava2:2.7.1"
    api "com.squareup.okhttp3:okhttp:4.7.2"
    api "com.squareup.okhttp3:logging-interceptor:4.7.2"
    api "io.reactivex.rxjava2:rxandroid:2.1.1"
    api "io.reactivex.rxjava2:rxjava:2.2.10"
    api 'io.supercharge:shimmerlayout:2.1.0'
    api "androidx.test.espresso:espresso-idling-resource:3.2.0"

    testApi "org.mockito:mockito-core:3.2.4"
    testApi "org.mockito:mockito-inline:3.0.0"
    testApi "androidx.arch.core:core-testing:2.1.0"
    testApi "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"

    api 'androidx.room:room-runtime:2.2.5'
    kapt 'androidx.room:room-compiler:2.2.5'
    api 'androidx.room:room-rxjava2:2.2.5'
    api 'androidx.paging:paging-runtime:2.1.2'
    api "androidx.paging:paging-rxjava2:2.1.2"
}

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        userOrg = 'farawla'
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
if (project.rootProject.file('local.properties').exists()) {
    apply from: 'https://raw.githubusercontent.com/wajahatkarim3/JCenter-Gradle-Scripts/master/install.gradle'
}